{"title": "How to prevent SQL injection in PHP?", "content": "<div class=\"post-text\">\n<p><strong>Use prepared statements and parameterized queries.</strong>\u00a0These are SQL statements that are sent to and parsed by the database server separately from any parameters. This way it is impossible for an attacker to inject malicious SQL.</p>\n<p>You basically have two options to achieve this:</p>\n<ol>\n<li>Using\u00a0<a href=\"http://php.net/manual/en/book.pdo.php\" rel=\"noreferrer\">PDO</a>\u00a0(for any supported database driver):\n<pre class=\"lang-php prettyprint prettyprinted\"><code><span class=\"pln\">$stmt </span><span class=\"pun\">=</span><span class=\"pln\"> $pdo</span><span class=\"pun\">-></span><span class=\"pln\">prepare</span><span class=\"pun\">(</span><span class=\"str\">'SELECT * FROM employees WHERE name = :name'</span><span class=\"pun\">);</span><span class=\"pln\">\n\n$stmt</span><span class=\"pun\">-></span><span class=\"pln\">execute</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"str\">'name'</span> <span class=\"pun\">=></span><span class=\"pln\"> $name</span><span class=\"pun\">));</span>\n\n<span class=\"kwd\">foreach</span> <span class=\"pun\">(</span><span class=\"pln\">$stmt </span><span class=\"kwd\">as</span><span class=\"pln\"> $row</span><span class=\"pun\">)</span> <span class=\"pun\">{</span>\n    <span class=\"com\">// do something with $row</span>\n<span class=\"pun\">}</span></code></code></pre>\n</li>\n<li>Using\u00a0<a href=\"http://php.net/manual/en/book.mysqli.php\" rel=\"noreferrer\">MySQLi</a>\u00a0(for MySQL):\n<pre class=\"lang-php prettyprint prettyprinted\"><code><span class=\"pln\">$stmt </span><span class=\"pun\">=</span><span class=\"pln\"> $dbConnection</span><span class=\"pun\">-></span><span class=\"pln\">prepare</span><span class=\"pun\">(</span><span class=\"str\">'SELECT * FROM employees WHERE name = ?'</span><span class=\"pun\">);</span><span class=\"pln\">\n$stmt</span><span class=\"pun\">-></span><span class=\"pln\">bind_param</span><span class=\"pun\">(</span><span class=\"str\">'s'</span><span class=\"pun\">,</span><span class=\"pln\"> $name</span><span class=\"pun\">);</span> <span class=\"com\">// 's' specifies the variable type => 'string'</span><span class=\"pln\">\n\n$stmt</span><span class=\"pun\">-></span><span class=\"pln\">execute</span><span class=\"pun\">();</span><span class=\"pln\">\n\n$result </span><span class=\"pun\">=</span><span class=\"pln\"> $stmt</span><span class=\"pun\">-></span><span class=\"pln\">get_result</span><span class=\"pun\">();</span>\n<span class=\"kwd\">while</span> <span class=\"pun\">(</span><span class=\"pln\">$row </span><span class=\"pun\">=</span><span class=\"pln\"> $result</span><span class=\"pun\">-></span><span class=\"pln\">fetch_assoc</span><span class=\"pun\">())</span> <span class=\"pun\">{</span>\n    <span class=\"com\">// do something with $row</span>\n<span class=\"pun\">}</span></code></code></pre>\n</li>\n</ol>\n<p>If you&#8217;re connecting to a database other than MySQL, there is a driver-specific second option that you can refer to (e.g.\u00a0<code>pg_prepare()</code>\u00a0and\u00a0<code>pg_execute()</code>\u00a0for PostgreSQL). PDO is the universal option.</p>\n<h2>Correctly setting up the connection</h2>\n<p>Note that when using\u00a0<code>PDO</code>\u00a0to access a MySQL database\u00a0<em>real</em>\u00a0prepared statements are\u00a0<strong>not used by default</strong>. To fix this you have to disable the emulation of prepared statements. An example of creating a connection using PDO is:</p>\n<pre class=\"lang-php prettyprint prettyprinted\"><code><span class=\"pln\">$dbConnection </span><span class=\"pun\">=</span> <span class=\"kwd\">new</span><span class=\"pln\"> PDO</span><span class=\"pun\">(</span><span class=\"str\">'mysql:dbname=dbtest;host=127.0.0.1;charset=utf8'</span><span class=\"pun\">,</span> <span class=\"str\">'user'</span><span class=\"pun\">,</span> <span class=\"str\">'pass'</span><span class=\"pun\">);</span><span class=\"pln\">\n\n$dbConnection</span><span class=\"pun\">-></span><span class=\"pln\">setAttribute</span><span class=\"pun\">(</span><span class=\"pln\">PDO</span><span class=\"pun\">::</span><span class=\"pln\">ATTR_EMULATE_PREPARES</span><span class=\"pun\">,</span> <span class=\"kwd\">false</span><span class=\"pun\">);</span><span class=\"pln\">\n$dbConnection</span><span class=\"pun\">-></span><span class=\"pln\">setAttribute</span><span class=\"pun\">(</span><span class=\"pln\">PDO</span><span class=\"pun\">::</span><span class=\"pln\">ATTR_ERRMODE</span><span class=\"pun\">,</span><span class=\"pln\"> PDO</span><span class=\"pun\">::</span><span class=\"pln\">ERRMODE_EXCEPTION</span><span class=\"pun\">);</span></code></code></pre>\n<p>In the above example the error mode isn&#8217;t strictly necessary,\u00a0<strong>but it is advised to add it</strong>. This way the script will not stop with a\u00a0<code>Fatal Error</code>\u00a0when something goes wrong. And it gives the developer the chance to\u00a0<code>catch</code>\u00a0any error(s) which are\u00a0<code>throw</code>n as\u00a0<code>PDOException</code>s.</p>\n<p>What is\u00a0<strong>mandatory</strong>, however, is the first\u00a0<code>setAttribute()</code>\u00a0line, which tells PDO to disable emulated prepared statements and use\u00a0<em>real</em>\u00a0prepared statements. This makes sure the statement and the values aren&#8217;t parsed by PHP before sending it to the MySQL server (giving a possible attacker no chance to inject malicious SQL).</p>\n<p>Although you can set the\u00a0<code>charset</code>\u00a0in the options of the constructor, it&#8217;s important to note that &#8216;older&#8217; versions of PHP (< 5.3.6)\u00a0<a href=\"http://php.net/manual/en/ref.pdo-mysql.connection.php\" rel=\"noreferrer\">silently ignored the charset parameter</a>\u00a0in the DSN.</p>\n<h2>Explanation</h2>\n<p>What happens is that the SQL statement you pass to\u00a0<code>prepare</code>\u00a0is parsed and compiled by the database server. By specifying parameters (either a\u00a0<code>?</code>\u00a0or a named parameter like\u00a0<code>:name</code>\u00a0in the example above) you tell the database engine where you want to filter on. Then when you call\u00a0<code>execute</code>, the prepared statement is combined with the parameter values you specify.</p>\n<p>The important thing here is that the parameter values are combined with the compiled statement, not an SQL string. SQL injection works by tricking the script into including malicious strings when it creates SQL to send to the database. So by sending the actual SQL separately from the parameters, you limit the risk of ending up with something you didn&#8217;t intend. Any parameters you send when using a prepared statement will just be treated as strings (although the database engine may do some optimization so parameters may end up as numbers too, of course). In the example above, if the\u00a0<code>$name</code>\u00a0variable contains\u00a0<code>'Sarah'; DELETE FROM employees</code>\u00a0the result would simply be a search for the string\u00a0<code>\"'Sarah'; DELETE FROM employees\"</code>, and you will not end up with\u00a0<a href=\"http://xkcd.com/327/\" rel=\"noreferrer\">an empty table</a>.</p>\n<p>Another benefit of using prepared statements is that if you execute the same statement many times in the same session it will only be parsed and compiled once, giving you some speed gains.</p>\n<p>Oh, and since you asked about how to do it for an insert, here&#8217;s an example (using PDO):</p>\n<pre class=\"lang-php prettyprint prettyprinted\"><code><span class=\"pln\">$preparedStatement </span><span class=\"pun\">=</span><span class=\"pln\"> $db</span><span class=\"pun\">-></span><span class=\"pln\">prepare</span><span class=\"pun\">(</span><span class=\"str\">'INSERT INTO table (column) VALUES (:column)'</span><span class=\"pun\">);</span><span class=\"pln\">\n\n$preparedStatement</span><span class=\"pun\">-></span><span class=\"pln\">execute</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">(</span><span class=\"str\">'column'</span> <span class=\"pun\">=></span><span class=\"pln\"> $unsafeValue</span><span class=\"pun\">));</span></code></code></pre>\n<h2>Can prepared statements be used for dynamic queries?</h2>\n<p>While you can still use prepared statements for the query parameters, the structure of the dynamic query itself cannot be parametrized and certain query features cannot be parametrized.</p>\n<p>For these specific scenarios, the best thing to do is use a whitelist filter that restricts the possible values.</p>\n<pre class=\"default prettyprint prettyprinted\"><code><span class=\"com\">// Value whitelist</span>\n<span class=\"com\">// $dir can only be 'DESC' otherwise it will be 'ASC'</span>\n<span class=\"kwd\">if</span> <span class=\"pun\">(</span><span class=\"pln\">empty</span><span class=\"pun\">(</span><span class=\"pln\">$dir</span><span class=\"pun\">)</span> <span class=\"pun\">||</span><span class=\"pln\"> $dir </span><span class=\"pun\">!==</span> <span class=\"str\">'DESC'</span><span class=\"pun\">)</span> <span class=\"pun\">{</span><span class=\"pln\">\n   $dir </span><span class=\"pun\">=</span> <span class=\"str\">'ASC'</span><span class=\"pun\">;</span>\n<span class=\"pun\">}</span></code></code></pre>\n</div>\n<div class=\"grid mb0 fw-wrap ai-start jc-end gs8 gsy\">\n<div class=\"grid--cell mr16\">\n<div class=\"post-menu\">source :\u00a0https://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php</div>\n</div>\n</div>\n", "slug": "how-can-i-prevent-sql-injection-in-php", "featuredImage": null, "date": "2018-03-12T16:06:20", "categories": ["programming", "web development"]}